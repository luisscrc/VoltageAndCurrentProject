# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Graficas.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
# PARA GRAFICAR
import sys
import numpy as np
from ui_Graficas import*
#from PySide2 import QtCore
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.pyplot as plt
# Conexión con Arduino 


class MiApp(QtWidgets.QMainWindow):
    def __init__(self,parent=None):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        print("CONEXION CON ARDUINO")  
        self.ui.start.clicked.connect(self.inicio)
        # Generar graficas sin mostrarlas
        self.grafica1 = Canvas_voltage()
        self.grafica2 = Canvas_current()
        self.grafica3 = Canvas_power()
        self.grafica4 = Canvas_energy()

        self.ui.graphicsView_voltage.addWidget(self.grafica1)
        self.ui.graphicsView_current.addWidget(self.grafica2)
        self.ui.graphicsView_power.addWidget(self.grafica3)
        self.ui.graphicsView_energy.addWidget(self.grafica4)
    
    def inicio(self):
        print("Inicio")
        ## Tomar valor de umbral de energia
        umbral = self.ui.doubleSpinBox_umbral.value()
        print(umbral)
        ## Calcular voltaje

        ## Calcular corriente

        ## Calcular potencia

        ## Desplegar en LCD voltaje, corriente y potencia
        self.ui.lcd_voltaje.display(umbral)
        self.ui.lcd_current.display(umbral)
        self.ui.lcd_power.display(umbral)
        ## Mostrar gráficas voltaje, corriente, potencia y energía

    
class Canvas_voltage(FigureCanvas): ## Clase para graficar voltaje
    def __init__(self,parent=None):
        self.fig , self.ax = plt.subplots(1, dpi=100, figsize=(5,5),sharey=True,facecolor='white')
        super().__init__(self.fig)

        self.fig.suptitle('Voltaje', size=9)
        np.random.seed(20)
        y = np.random.randn(150).cumsum()

        self.ax = plt.axes()
        plt.plot(y, color='magenta')

class Canvas_current(FigureCanvas): ## Clase para graficar voltaje
    def __init__(self,parent=None):
        self.fig , self.ax = plt.subplots(1, dpi=100, figsize=(5,5),sharey=True,facecolor='white')
        super().__init__(self.fig)

        self.fig.suptitle('Corriente', size=9)
        np.random.seed(20)
        y = np.random.randn(150).cumsum()

        self.ax = plt.axes()
        plt.plot(y, color='magenta')

class Canvas_power(FigureCanvas): ## Clase para graficar voltaje
    def __init__(self,parent=None):
        self.fig , self.ax = plt.subplots(1, dpi=100, figsize=(5,5),sharey=True,facecolor='white')
        super().__init__(self.fig)

        self.fig.suptitle('Potencia', size=9)
        np.random.seed(20)
        y = np.random.randn(150).cumsum()

        self.ax = plt.axes()
        plt.plot(y, color='magenta')

class Canvas_energy(FigureCanvas): ## Clase para graficar voltaje
    def __init__(self,parent=None):
        self.fig , self.ax = plt.subplots(1, dpi=100, figsize=(5,5),sharey=True,facecolor='white')
        super().__init__(self.fig)

        self.fig.suptitle('Energia', size=9)
        np.random.seed(20)
        y = np.random.randn(150).cumsum()

        self.ax = plt.axes()
        plt.plot(y, color='magenta')

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    mi_app = MiApp()
    mi_app.show()
    sys.exit(app.exec_())